<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shareong</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shareong.me/"/>
  <updated>2017-09-16T03:24:00.075Z</updated>
  <id>http://shareong.me/</id>
  
  <author>
    <name>Shareong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言之切片</title>
    <link href="http://shareong.me/Go/Go-slice.html"/>
    <id>http://shareong.me/Go/Go-slice.html</id>
    <published>2017-09-15T12:04:13.372Z</published>
    <updated>2017-09-16T03:24:00.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><p>声明一个未指定大小的数组来定义切片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var identifier []type</div></pre></td></tr></table></figure></p>
<p>使用make()函数创建切片S<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var slice_name []type = make([]type, len)</div><div class="line">//可简写为</div><div class="line">silce_name := make([]type, len)</div><div class="line">//可指定容量（可选参数）</div><div class="line">silce_name := make([]type, len, capacity)</div></pre></td></tr></table></figure></p>
<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><p>直接赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slice_name :=[] type &#123;value1, value2...&#125;</div></pre></td></tr></table></figure></p>
<p>引用赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// index可缺省</div><div class="line">slicea := sliceb/array[startindex:endindex]</div></pre></td></tr></table></figure></p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="len-和-cap"><a href="#len-和-cap" class="headerlink" title="len() 和 cap()"></a>len() 和 cap()</h3><p>len()获取长度 cap()测量容量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	numbers := make([]int, 3, 5)</div><div class="line">    fmt.Printf(&quot;%d, %d&quot;,len(numbers), cap(numbers))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出 3， 5</p>
<h3 id="可用nil判断是否为空切片"><a href="#可用nil判断是否为空切片" class="headerlink" title="可用nil判断是否为空切片"></a>可用nil判断是否为空切片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s []int</div><div class="line">if( s == nil )</div></pre></td></tr></table></figure>
<h3 id="append-和-copy"><a href="#append-和-copy" class="headerlink" title="append() 和 copy()"></a>append() 和 copy()</h3><p>append(s,v1,v2..)给S添加元素，返回新的切片<br>copy（s1,s2)拷贝s2给s1</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;h3 id=&quot;切片定义&quot;&gt;&lt;a href=&quot;#切片定义&quot; class=&quot;headerlink&quot; title=&quot;切片定义&quot;&gt;&lt;/a&gt;切片定
    
    </summary>
    
    
      <category term="Go语言" scheme="http://shareong.me/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
      <category term="笔记" scheme="http://shareong.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言之数组、指针、结构体</title>
    <link href="http://shareong.me/Go/Go-array-pointer-struct.html"/>
    <id>http://shareong.me/Go/Go-array-pointer-struct.html</id>
    <published>2017-09-14T16:00:00.000Z</published>
    <updated>2017-09-15T12:03:31.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var variable_name [SIZE] variable_type</div></pre></td></tr></table></figure></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var balance = [5]float32&#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;</div><div class="line"></div><div class="line"> var balance = [...]float32&#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;</div></pre></td></tr></table></figure>
<p>##指针<br>和C语言类似，空指针为nil</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   var  ptr *int</div><div class="line">   fmt.Printf(&quot;ptr的值为: %x\n&quot;, ptr  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">type struct_variable_type struct &#123;</div><div class="line">   member definition;</div><div class="line">   member definition;</div><div class="line">   ...</div><div class="line">   member definition;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用结构体指针访问结构体成员，使用 “.” 操作符</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
    
    </summary>
    
    
      <category term="Go语言" scheme="http://shareong.me/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
      <category term="笔记" scheme="http://shareong.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言之函数与作用域</title>
    <link href="http://shareong.me/Go/Go-function-scope.html"/>
    <id>http://shareong.me/Go/Go-function-scope.html</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2017-09-14T11:59:41.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func function_name( [parameter list] ) [return_types] &#123;</div><div class="line">   函数体</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func swap(x,  y string) (string, string) &#123;</div><div class="line">	return y, x</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">	a, b := swap(&quot;first&quot;, &quot;last&quot;)</div><div class="line">	fmt.Println(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果为：last，first</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>值传递：值传递是指在调用函数时将实际参数复制一份传递到函数中<br>引用传递：将实际参数的地址传递到函数中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line"></div><div class="line">   var a int = 100</div><div class="line">   var b int= 200</div><div class="line"></div><div class="line">   fmt.Printf(&quot;交换前，a 的值 : %d\n&quot;, a )</div><div class="line">   fmt.Printf(&quot;交换前，b 的值 : %d\n&quot;, b )</div><div class="line"></div><div class="line">   swap(&amp;a, &amp;b)</div><div class="line"></div><div class="line">   fmt.Printf(&quot;交换后，a 的值 : %d\n&quot;, a )</div><div class="line">   fmt.Printf(&quot;交换后，b 的值 : %d\n&quot;, b )</div><div class="line">&#125;</div><div class="line"></div><div class="line">func swap(x *int, y *int) &#123;</div><div class="line">   var temp int</div><div class="line">   temp = *x    </div><div class="line">   *x = *y      </div><div class="line">   *y = temp   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果为：<br>交换前，a 的值 : 100<br>交换前，b 的值 : 200<br>交换后，a 的值 : 200<br>交换后，b 的值 : 100</p>
<h3 id="函数作为值"><a href="#函数作为值" class="headerlink" title="函数作为值"></a>函数作为值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">   &quot;fmt&quot;</div><div class="line">   &quot;math&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">   /* 声明函数变量 */</div><div class="line">   getSquareRoot := func(x float64) float64 &#123;</div><div class="line">      return math.Sqrt(x)</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /* 使用函数 */</div><div class="line">   fmt.Println(getSquareRoot(9))</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><p>Go 语言支持匿名函数，可作为闭包。匿名函数是一个”内联”语句或表达式。匿名函数的优越性在于可以直接使用函数内的变量，不必申明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func getSequence() func() int &#123;</div><div class="line">   i:=0</div><div class="line">   return func() int &#123;</div><div class="line">      i+=1</div><div class="line">     return i  </div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">   /* nextNumber 为一个函数，函数 i 为 0 */</div><div class="line">   nextNumber := getSequence()  </div><div class="line"></div><div class="line">   /* 调用 nextNumber 函数，i 变量自增 1 并返回 */</div><div class="line">   fmt.Println(nextNumber())</div><div class="line">   fmt.Println(nextNumber())</div><div class="line">   fmt.Println(nextNumber())</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果： 1 2 3</p>
<h3 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h3><p>方法就是指明了该函数的使用者，该使用者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func (variable_name variable_data_type) function_name() [return_type]&#123;</div><div class="line">   /* 函数体*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;  </div><div class="line"></div><div class="line">/* 定义结构 */</div><div class="line">type Circle struct &#123;</div><div class="line">  radius float64</div><div class="line">&#125;</div><div class="line"></div><div class="line">//该 method 属于 Circle 类型对象中的方法</div><div class="line">func (c Circle) getArea() float64&#123;</div><div class="line">	//c.radius 即为 Circle 类型对象中的属性</div><div class="line">	return 3.14 * c.radius * c.radius</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	var c Circle</div><div class="line">	c.radius = 10.00</div><div class="line">	fmt.Println(&quot;Area of Circle(c) = &quot;, c.getArea())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">/* 声明全局变量 */</div><div class="line">var g int = 20</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   /* 声明局部变量 */</div><div class="line">   var g int = 10</div><div class="line"></div><div class="line">   fmt.Printf (&quot;%d\n&quot;,  g)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果为：10</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;定义格式&quot;&gt;&lt;a href=&quot;#定义格式&quot; class=&quot;headerlink&quot; title=&quot;定义格式&quot;&gt;&lt;/a&gt;定义格式&lt;/h
    
    </summary>
    
    
      <category term="Go语言" scheme="http://shareong.me/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
      <category term="笔记" scheme="http://shareong.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言之分支与循环</title>
    <link href="http://shareong.me/Go/Go-branches-loops.html"/>
    <id>http://shareong.me/Go/Go-branches-loops.html</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2017-09-13T11:51:51.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if 布尔表达式 &#123;</div><div class="line">   /* 在布尔表达式为 true 时执行 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if 布尔表达式 &#123;</div><div class="line">   /* 在布尔表达式为 true 时执行 */</div><div class="line">&#125; else &#123;</div><div class="line">  /* 在布尔表达式为 false 时执行 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="swithch"><a href="#swithch" class="headerlink" title="swithch"></a>swithch</h3><p>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上直下逐一测试，直到匹配为止，匹配项后面也不需要再加break。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   /* 定义局部变量 */</div><div class="line">   var grade string = &quot;B&quot;</div><div class="line">   var marks int = 90</div><div class="line"></div><div class="line">   switch marks &#123;</div><div class="line">      case 90: grade = &quot;A&quot;</div><div class="line">      case 80: grade = &quot;B&quot;</div><div class="line">      case 50,60,70 : grade = &quot;C&quot;</div><div class="line">      default: grade = &quot;D&quot;  </div><div class="line">   &#125;</div><div class="line"></div><div class="line">   switch &#123;</div><div class="line">      case grade == &quot;A&quot; :</div><div class="line">         fmt.Printf(&quot;优秀!\n&quot; )     </div><div class="line">      case grade == &quot;B&quot;, grade == &quot;C&quot; :</div><div class="line">         fmt.Printf(&quot;良好\n&quot; )      </div><div class="line">      case grade == &quot;D&quot; :</div><div class="line">         fmt.Printf(&quot;及格\n&quot; )      </div><div class="line">      case grade == &quot;F&quot;:</div><div class="line">         fmt.Printf(&quot;不及格\n&quot; )</div><div class="line">      default:</div><div class="line">         fmt.Printf(&quot;差\n&quot; );</div><div class="line">   &#125;</div><div class="line">   fmt.Printf(&quot;你的等级是 %s\n&quot;, grade );      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select是Go中的一个控制结构，类似于用于通信的switch语句。每个case必须是一个通信操作，要么是发送要么是接收。<br>select随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。一个默认的子句应该总是可运行的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">select &#123;</div><div class="line">    case communication clause  :</div><div class="line">       statement(s);      </div><div class="line">    case communication clause  :</div><div class="line">       statement(s); </div><div class="line">    /* 你可以定义任意数量的 case */</div><div class="line">    default : /* 可选 */</div><div class="line">       statement(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>Go语言的For循环有3中形式：<br>和 C 语言的 for 一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for init; condition; post &#123; &#125;</div></pre></td></tr></table></figure></p>
<p>和 C 的 while 一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for condition &#123; &#125;</div></pre></td></tr></table></figure></p>
<p>和 C 的 for(;;) 一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">v_name := value</div><div class="line"></div><div class="line">// 例如</div><div class="line">var a int = 10</div><div class="line">var b = 10</div><div class="line">c : = 10</div></pre></td></tr></table></figure></p>
<p>for 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for key, value := range oldMap &#123;</div><div class="line">    newMap[key] = value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line"></div><div class="line">	var a int = 15</div><div class="line">    var i int</div><div class="line">	</div><div class="line">	numbers := [6]int&#123;1,2,3,4&#125;</div><div class="line"></div><div class="line">	for i = 0; i &lt; 10; i++ &#123;</div><div class="line">		fmt.Printf(&quot;i = %d\n&quot;, i)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for i &lt; a &#123;</div><div class="line">		i++</div><div class="line">		fmt.Printf(&quot;i = %d\n&quot;, i)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for j, x := range numbers&#123;</div><div class="line">		fmt.Printf(&quot;numbers[%d] = %d\n&quot;, j, x)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h2&gt;&lt;h3 id=&quot;if-else&quot;&gt;&lt;a href=&quot;#if-else&quot; class=&quot;headerlink&quot; title=&quot;if else&quot;&gt;&lt;/
    
    </summary>
    
    
      <category term="Go语言" scheme="http://shareong.me/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
      <category term="笔记" scheme="http://shareong.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言之处理数据</title>
    <link href="http://shareong.me/Go/Go-data-type.html"/>
    <id>http://shareong.me/Go/Go-data-type.html</id>
    <published>2017-09-12T12:00:00.000Z</published>
    <updated>2017-09-15T09:14:26.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔型的值只可以是常量 true 或者 false。</p>
<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>整型 int 和浮点型 float，Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。<br>Go 也有基于架构的类型，例如：int、uint 和 uintptr：<br>整形：<br>uint8 无符号 8 位整型 (0 到 255)<br>uint16 无符号 16 位整型 (0 到 65535)<br>uint32 无符号 32 位整型 (0 到 4294967295)<br>uint64 无符号 64 位整型 (0 到 18446744073709551615)<br>int8 有符号 8 位整型 (-128 到 127)<br>int16 有符号 16 位整型 (-32768 到 32767)<br>int32 有符号 32 位整型 (-2147483648 到 2147483647)<br>int64 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)<br>浮点型：<br>float32 IEEE-754 32位浮点型数<br>float64 IEEE-754 64位浮点型数<br>complex64 32 位实数和虚数<br>complex128 64 位实数和虚数</p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>string：Go语言的字符串的字节使用UTF-8编码标识Unicode文本。</p>
<h3 id="派生类型"><a href="#派生类型" class="headerlink" title="派生类型"></a>派生类型</h3><p>(a) 指针类型（Pointer）<br>(b) 数组类型<br>(c) 结构化类型(struct)<br>(d) Channel 类型<br>(e) 函数类型<br>(f) 切片类型<br>(g) 接口类型（interface）<br>(h) Map 类型</p>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>声明变量的一般形式是使用 var 关键字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var identifier type</div></pre></td></tr></table></figure></p>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>第一种，指定变量类型，声明后若不赋值，使用默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var v_name v_type</div><div class="line">v_name = value</div></pre></td></tr></table></figure></p>
<p>第二种，根据值自行判定变量类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var v_name = value</div></pre></td></tr></table></figure></p>
<p>第三种，省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误。这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">v_name := value</div><div class="line"></div><div class="line">// 例如</div><div class="line">var a int = 10</div><div class="line">var b = 10</div><div class="line">c : = 10</div></pre></td></tr></table></figure></p>
<h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">var x, y int</div><div class="line">var (  // 这种因式分解关键字的写法一般用于声明全局变量</div><div class="line">    a int</div><div class="line">    b bool</div><div class="line">)</div><div class="line"></div><div class="line">var c, d int = 1, 2</div><div class="line">var e, f = 123, &quot;hello&quot;</div><div class="line"></div><div class="line">//这种不带声明格式的只能在函数体中出现</div><div class="line">//g, h := 123, &quot;hello&quot;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    g, h := 123, &quot;hello&quot;</div><div class="line">    println(x, y, a, b, c, d, e, f, g, h)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果为：0 0 0 false 1 2 123 hello 123 hello</p>
<h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><p>值类型的变量的值存储在栈中，引用类型一般指向地址。</p>
<hr>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>声明变量的一般形式是使用 const 关键字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const identifier [type] = value</div></pre></td></tr></table></figure></p>
<p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。<br>显式类型定义： const b string = “abc”<br>隐式类型定义： const b = “abc”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   const LENGTH int = 10</div><div class="line">   const WIDTH int = 5   </div><div class="line">   var area int</div><div class="line">   const a, b, c = 1, false, &quot;str&quot; //多重赋值</div><div class="line"></div><div class="line">   area = LENGTH * WIDTH</div><div class="line">   fmt.Printf(&quot;面积为 : %d&quot;, area)</div><div class="line">   println()</div><div class="line">   println(a, b, c)   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>常量还可以用作枚举：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const (</div><div class="line">    Unknown = 0</div><div class="line">    Female = 1</div><div class="line">    Male = 2</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>常量可以用len(), cap(), unsafe.Sizeof()常量计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;unsafe&quot;</div><div class="line">const (</div><div class="line">    a = &quot;abc&quot;</div><div class="line">    b = len(a)</div><div class="line">    c = unsafe.Sizeof(a)</div><div class="line">)</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    println(a, b, c)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。<br>在每一个const关键字出现时，被重置为0，然后再下一个const出现之前，每出现一次iota，其所代表的数字会自动增加1。<br>iota 可以被用作枚举值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    const (</div><div class="line">            a = iota   //0</div><div class="line">            b          //1</div><div class="line">            c          //2</div><div class="line">            d = &quot;ha&quot;   //独立值，iota += 1</div><div class="line">            e          //&quot;ha&quot;   iota += 1</div><div class="line">            f = 100    //iota +=1</div><div class="line">            g          //100  iota +=1</div><div class="line">            h = iota   //7,恢复计数</div><div class="line">            i          //8</div><div class="line">    )</div><div class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上实例运行结果为：<br>0 1 2 ha ha 100 100 7 8</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;布尔型&quot;&gt;&lt;a href=&quot;#布尔型&quot; class=&quot;headerlink&quot; title=&quot;布尔型&quot;&gt;&lt;/a&gt;布尔
    
    </summary>
    
    
      <category term="Go语言" scheme="http://shareong.me/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
      <category term="笔记" scheme="http://shareong.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>初识Go语言</title>
    <link href="http://shareong.me/Go/Go-language-structure.html"/>
    <id>http://shareong.me/Go/Go-language-structure.html</id>
    <published>2017-09-12T07:53:30.000Z</published>
    <updated>2017-09-14T12:03:43.801Z</updated>
    
    <content type="html"><![CDATA[<p>　　Go语言由Google开发并开源，表达能力强，简洁高效，提供海量并发的支持，对于高性能分布式系统领域有更高的开发效率。Go语言已经成为云计算、云存储时代最重要的基础编程语言。</p>
<h2 id="语言结构"><a href="#语言结构" class="headerlink" title="语言结构"></a>语言结构</h2><h3 id="基础组成"><a href="#基础组成" class="headerlink" title="基础组成"></a>基础组成</h3><p>　　包声明，引入包，函数，变量，语句&amp;表达式，注释</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package main    //源文件第一行代码必须声明包名</div><div class="line"></div><div class="line">import &quot;fmt&quot;    //指明引入的包，fmt包实现了格式化IO</div><div class="line"></div><div class="line">func main() &#123;   //如果有init()函数则先执行该函数</div><div class="line">   /* 这是我的第一个简单的程序 */</div><div class="line">   fmt.Println(&quot;Hello, World!&quot;) //Println自动增加换行符</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="Go标记"><a href="#Go标记" class="headerlink" title="Go标记"></a>Go标记</h3><p>Go程序可以由多个标记组成，可以是关键字，标识符，常量，字符串，符号。如以下GO 语句由6个标记组成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fmt.Println(&quot;Hello, World!&quot;)</div><div class="line"></div><div class="line">\\标记分别是：fmt, ., Println, (, &quot;Hello, World!&quot;, )</div></pre></td></tr></table></figure></p>
<h3 id="行分隔符"><a href="#行分隔符" class="headerlink" title="行分隔符"></a>行分隔符</h3><p>在Go程序中，一行代表一个语句结束，不需要分隔符。 多个语句写在一行需要”;”区分，不建议使用。</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A~Z和a~z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字。<code>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected)。</code></p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>Go代码25个关键字或保留字：<br>break, default, func, interface, select, case, defer, go, map, struct, chan, else, goto, package, switch, const, fallthrough, if, range, type, continue, for, import, return, var</p>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>在变量与运算符间加入空格，程序看起来更加美观<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fruit = apples + oranges</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　Go语言由Google开发并开源，表达能力强，简洁高效，提供海量并发的支持，对于高性能分布式系统领域有更高的开发效率。Go语言已经成为云计算、云存储时代最重要的基础编程语言。&lt;/p&gt;
&lt;h2 id=&quot;语言结构&quot;&gt;&lt;a href=&quot;#语言结构&quot; class=&quot;header
    
    </summary>
    
    
      <category term="Go语言" scheme="http://shareong.me/tags/Go%E8%AF%AD%E8%A8%80/"/>
    
      <category term="笔记" scheme="http://shareong.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>仰望天空，云卷云舒</title>
    <link href="http://shareong.me/stargazing-leayh.html"/>
    <id>http://shareong.me/stargazing-leayh.html</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2017-07-10T13:55:13.818Z</updated>
    
    <content type="html"><![CDATA[<p><center><br>今天前，辛苦并快乐着<br>闲步、听歌、耕耘书行<br>今天前，关心朋友和亲人<br>我有一扇窗户，仰望天空，云卷云舒<br>今天前，为每一次不幸祷告<br>祈愿以后我的幸福<br>仁慈的父告诉我的<br>我将告诉每一个不幸的人<br>为每一捧风每一寸彩霞找一个惬意的归宿<br>不相识的情侣，我也会祝福<br>愿你们执手偕老<br>愿你们有才人功成名就<br>愿你们在阳光下沐浴幸福<br>今天前，仰望天空，云卷云舒<br>这样<br>怀着希望<br>明天，面朝大海，春暖花开<br></center></p>
<p><center><br><img src="http://ospmkbjow.bkt.clouddn.com/leayh.jpg?imageView2/2/w/1000/h/400/q/75|imageslim" alt="leayh"><br></center></p>
<hr>
<p>　　这是我中学时代模仿海子《面朝大海，春暖花开》写的一篇日志，愿当时的那颗赤子之心能够陪伴我继续前行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;br&gt;今天前，辛苦并快乐着&lt;br&gt;闲步、听歌、耕耘书行&lt;br&gt;今天前，关心朋友和亲人&lt;br&gt;我有一扇窗户，仰望天空，云卷云舒&lt;br&gt;今天前，为每一次不幸祷告&lt;br&gt;祈愿以后我的幸福&lt;br&gt;仁慈的父告诉我的&lt;br&gt;我将告诉每一个不幸的人&lt;br&gt;为每一捧风每一
    
    </summary>
    
    
      <category term="随笔" scheme="http://shareong.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Single Number</title>
    <link href="http://shareong.me/Single-Number.html"/>
    <id>http://shareong.me/Single-Number.html</id>
    <published>2017-07-06T11:24:49.000Z</published>
    <updated>2017-07-08T06:10:35.056Z</updated>
    
    <content type="html"><![CDATA[<p>　　该系列的三个题目都来自 <a href="https://leetcode.com/problems/single-number/#/description" target="_blank" rel="external">LeetCode</a>，本文介绍了自己的几个复杂度较低的解决思路，如有不恰当的地方欢迎指出，或者你有更好的方法，期待与你讨论。</p>
<h2 id="Single-Number-I"><a href="#Single-Number-I" class="headerlink" title="Single Number I"></a>Single Number I</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　给定一个整形数组，数组中的元素除了某一个数只出现了一次，其它的数都出现了两次，找出这个单独出现的数。</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>　　这种题目可以扩展描述为：一个整形数组中只有一个元素出现了奇数次，其它的元素都出现了偶数次。这类问题比较简单，只需要一个异或(xor)操作就能解决了。设A为一个整数，那么     </p>
<p><center>A xor A = 0, A xor 0 = A</center><br>　　根据上面描述的性质，我们只需将数组里所有的元素进行异或，得到的结果就是要找的那个数。</p>
<h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int ans = 0;</div><div class="line">        for(int i = 0; i &lt; nums.size(); i++)</div><div class="line">            ans ^=  nums[i];</div><div class="line">        return ans;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Single-Number-II"><a href="#Single-Number-II" class="headerlink" title="Single Number II"></a>Single Number II</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　给定一个整形数组，数组中的元素除了某一个数只出现了一次，其它的数都出现了三次，找出这个单独出现的数。</p>
<h3 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h3><p>　　这一题有两种复杂度为O(n)的解决方法，都是通过位操作实现。第一种是最容易理解的，创建一个整形数组c[sizeof(int)]，用c[i]去记录给定数组中第i位（二进制位）为1的元素个数，再对c[i]进行mod3操作，最后c[]其实就是要找的那个数的二进制展开。<br>　　这里着重介绍第二种方法，因为用到了状态机的思想，比较好玩，而且代码精简。用one记录处理到当前元素为止，哪些二进制位1出现了1(mod3)次，用two记录哪些二进制位1出现了2(mod3)次。处理到最后，one记录的就是最终结果，two必然为0。这里有一个难点就是状态转移，这里我用两张图来表示one和two遇到0和1的一个状态变化（注：因为都是mod3操作，所以就不用考虑one和two同为1的状态，而且也不会出现这种状态）。<br>　　<center><img src="http://ospmkbjow.bkt.clouddn.com/Single_number_2.png" alt="single number 2"></center><br>　　看到这个图是不是一下子想起了卡诺图化简呢，然后我们得到如下的两个状态转移公式：<br>　　<code>one = (Bit ^ one &amp; ~two) | (Bit &amp; ~one &amp; ~two)</code><br>　　<code>two = (~Bit &amp; ~one &amp; two) | (Bit &amp; one &amp; ~two)</code></p>
<h3 id="代码展示-1"><a href="#代码展示-1" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int one = 0, two = 0, temp;</div><div class="line">    	for (int i = 0; i &lt; nums.size(); i++) &#123;</div><div class="line">            temp = one;   // Record the original state of one</div><div class="line">            one = (nums[i] ^ temp &amp; ~two) | (nums[i] &amp; ~temp &amp; ~two);</div><div class="line">            two = (~nums[i] &amp; ~temp &amp; two) | (nums[i] &amp; temp &amp; ~two);</div><div class="line">        &#125;</div><div class="line">	    return one;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Single-Number-III"><a href="#Single-Number-III" class="headerlink" title="Single Number III"></a>Single Number III</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>　　给定一个整形数组，数组中的元素除了某两个数只出现了一次，其它都出现了两次，找出这个两个单独出现的数。<br>　　例如给一个数组<code>nums = [1, 2, 1, 3, 2, 5]</code>，返回<code>[3, 5]</code>。</p>
<h3 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路"></a>解决思路</h3><p>　　本题和上面的题目一样，考察的仍然是位操作，而且同样能以O(n)的复杂度解决。本题和Single Number I 相似，解法也差不多，只不过要多绕一个弯子。首先我们想到的还是将数组所有的元素进行异或，假设A和B是我们要找的那两个数，那么异或的结果C就是<code>A oxr B</code>。C该怎么去用呢，这就是本题的难点。我们将C二进制展开，假如低位的8个bit是<code>01001000</code>，其中第4位和第7位（从低位向高位数）为1，那就意味着A和B在第4位和第8位具有不同的bit，我们把最低位的这一bit取出来，这里就是把第4位取出，然后用它将数组中的元素分为两类，一类就是该位的bit值为1，另一类为0，最后将这两类分别异或，就得到了我们要的结果。</p>
<h3 id="代码展示-2"><a href="#代码展示-2" class="headerlink" title="代码展示"></a>代码展示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int axorb = 0, l = nums.size();</div><div class="line">        for(int i = 0; i &lt; l; i++)</div><div class="line">            axorb ^= nums[i];</div><div class="line">        int lastbit = axorb ^ (axorb &amp; (axorb - 1)); // find a bit that a differs b</div><div class="line">        int a = 0, b = 0;</div><div class="line">        for(int i = 0; i &lt; l; i++)&#123;</div><div class="line">            if(nums[i] &amp; lastbit) a ^= nums[i];</div><div class="line">            else b ^= nums[i];</div><div class="line">        &#125;</div><div class="line">        return vector&lt;int&gt;&#123;a, b&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　该系列的三个题目都来自 &lt;a href=&quot;https://leetcode.com/problems/single-number/#/description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LeetCode&lt;/a&gt;，本文介绍了自己的几个复
    
    </summary>
    
    
      <category term="Array" scheme="http://shareong.me/tags/Array/"/>
    
      <category term="Coding" scheme="http://shareong.me/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>如何使用MathJax引擎在博客中插入数学公式</title>
    <link href="http://shareong.me/Mathjax-Introduction.html"/>
    <id>http://shareong.me/Mathjax-Introduction.html</id>
    <published>2017-07-05T16:00:00.000Z</published>
    <updated>2017-07-07T13:06:05.297Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

<h3 id="Mathjax简介"><a href="#Mathjax简介" class="headerlink" title="Mathjax简介"></a>Mathjax简介</h3><p>　　<a href="https://www.mathjax.org/" target="_blank" rel="external">MathJax</a>是一款运行在浏览器中的开源的数学符号渲染引擎，使用MathJax可以方便地在浏览器中显示数学公式，不需要使用图片。目前，MathJax可以解析Latex、MathML和ASCIIMathML的标记语言。</p>
<h3 id="Mathjax获取"><a href="#Mathjax获取" class="headerlink" title="Mathjax获取"></a>Mathjax获取</h3><p>　　获取Mathjax最简单的方法就是通过使用分布式网络服务中的MathJax的副本，它位于cdn.mathjax.org。采用这种方式，你只需要在编辑Markdown文档时，在正文最前面插入（注：插入的位置是在文档属性与正文之间，而不是在第一行）如下的javascript代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; async</div><div class="line">  src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="编辑LaTex公式"><a href="#编辑LaTex公式" class="headerlink" title="编辑LaTex公式"></a>编辑LaTex公式</h3><p>　　这里就不在赘述LaTex公式编辑的基本语法了，唯一要强调的就是MathJax中的公式排版有两种方式，Inline和Displayed。Inline表示在行内显示公式，定界符是<code>\(...\)</code>；Display表示单独一行显示公式，定界符是<code>$$...$$</code>。例如我们编辑一个行内公式\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}\)，它的LaTex内容如下,注意需要转义<code>\</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\\(x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;\\)</div></pre></td></tr></table></figure></p>
<p>　　如果我们要编辑一个行间公式，例如$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$<br>　　它的LaTex内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$x=\frac&#123;-b\pm\sqrt&#123;b^2-4ac&#125;&#125;&#123;2a&#125;$$</div></pre></td></tr></table></figure></p>
<p>更多的公式编辑技巧参考：</p>
<blockquote>
<p><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" target="_blank" rel="external">Mathjax与LaTex公式简介</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h3 id=&quot;Mat
    
    </summary>
    
    
      <category term="教程" scheme="http://shareong.me/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
